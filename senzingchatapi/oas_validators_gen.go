// Code generated by ogen, DO NOT EDIT.

package senzingchatapi

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/validate"
)

func (s EntityReportEntityReportGetOKApplicationJSON) Validate() error {
	alias := ([]jx.Raw)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ExportFlags) Validate() error {
	switch s {
	case "MATCHED":
		return nil
	case "POSSIBLE_MATCHES":
		return nil
	case "POSSIBLE_RELATIONSHIPS":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *HTTPValidationError) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Detail {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "detail",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValidationError) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Loc == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "loc",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
