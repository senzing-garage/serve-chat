// Code generated by ogen, DO NOT EDIT.

package senzingchatapi

import (
	"context"
	"net/url"
	"strings"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// EntityDetailsEntityDetailsGet invokes entity_details_entity_details_get operation.
	//
	// Retrieve entity data based on the ID of a resolved identity.
	//
	// GET /entity_details
	EntityDetailsEntityDetailsGet(ctx context.Context, params EntityDetailsEntityDetailsGetParams) (EntityDetailsEntityDetailsGetRes, error)
	// EntityHowEntityHowGet invokes entity_how_entity_how_get operation.
	//
	// Determines and details steps-by-step how records resolved to an ENTITY_ID.
	//
	// GET /entity_how
	EntityHowEntityHowGet(ctx context.Context, params EntityHowEntityHowGetParams) (EntityHowEntityHowGetRes, error)
	// EntityReportEntityReportGet invokes entity_report_entity_report_get operation.
	//
	// Return 10 entities with either matches, possible matches, or relationships.
	//
	// GET /entity_report
	EntityReportEntityReportGet(ctx context.Context, params EntityReportEntityReportGetParams) (EntityReportEntityReportGetRes, error)
	// EntitySearchEntitySearchPost invokes entity_search_entity_search_post operation.
	//
	// Retrieves entity data based on a user-specified set of entity attributes.
	//
	// POST /entity_search
	EntitySearchEntitySearchPost(ctx context.Context, request *SearchAttributes) (EntitySearchEntitySearchPostRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// EntityDetailsEntityDetailsGet invokes entity_details_entity_details_get operation.
//
// Retrieve entity data based on the ID of a resolved identity.
//
// GET /entity_details
func (c *Client) EntityDetailsEntityDetailsGet(ctx context.Context, params EntityDetailsEntityDetailsGetParams) (EntityDetailsEntityDetailsGetRes, error) {
	res, err := c.sendEntityDetailsEntityDetailsGet(ctx, params)
	return res, err
}

func (c *Client) sendEntityDetailsEntityDetailsGet(ctx context.Context, params EntityDetailsEntityDetailsGetParams) (res EntityDetailsEntityDetailsGetRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("entity_details_entity_details_get"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/entity_details"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "EntityDetailsEntityDetailsGet",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/entity_details"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "entity_id" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "entity_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.EntityID))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeEntityDetailsEntityDetailsGetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// EntityHowEntityHowGet invokes entity_how_entity_how_get operation.
//
// Determines and details steps-by-step how records resolved to an ENTITY_ID.
//
// GET /entity_how
func (c *Client) EntityHowEntityHowGet(ctx context.Context, params EntityHowEntityHowGetParams) (EntityHowEntityHowGetRes, error) {
	res, err := c.sendEntityHowEntityHowGet(ctx, params)
	return res, err
}

func (c *Client) sendEntityHowEntityHowGet(ctx context.Context, params EntityHowEntityHowGetParams) (res EntityHowEntityHowGetRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("entity_how_entity_how_get"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/entity_how"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "EntityHowEntityHowGet",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/entity_how"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "entity_id" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "entity_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.EntityID))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeEntityHowEntityHowGetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// EntityReportEntityReportGet invokes entity_report_entity_report_get operation.
//
// Return 10 entities with either matches, possible matches, or relationships.
//
// GET /entity_report
func (c *Client) EntityReportEntityReportGet(ctx context.Context, params EntityReportEntityReportGetParams) (EntityReportEntityReportGetRes, error) {
	res, err := c.sendEntityReportEntityReportGet(ctx, params)
	return res, err
}

func (c *Client) sendEntityReportEntityReportGet(ctx context.Context, params EntityReportEntityReportGetParams) (res EntityReportEntityReportGetRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("entity_report_entity_report_get"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/entity_report"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "EntityReportEntityReportGet",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/entity_report"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "export_flags" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "export_flags",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(string(params.ExportFlags)))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeEntityReportEntityReportGetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// EntitySearchEntitySearchPost invokes entity_search_entity_search_post operation.
//
// Retrieves entity data based on a user-specified set of entity attributes.
//
// POST /entity_search
func (c *Client) EntitySearchEntitySearchPost(ctx context.Context, request *SearchAttributes) (EntitySearchEntitySearchPostRes, error) {
	res, err := c.sendEntitySearchEntitySearchPost(ctx, request)
	return res, err
}

func (c *Client) sendEntitySearchEntitySearchPost(ctx context.Context, request *SearchAttributes) (res EntitySearchEntitySearchPostRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("entity_search_entity_search_post"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/entity_search"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "EntitySearchEntitySearchPost",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/entity_search"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeEntitySearchEntitySearchPostRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeEntitySearchEntitySearchPostResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
